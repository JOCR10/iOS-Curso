//
//  ToDoTasksListViewController.swift
//  CleanSwiftExample
//
//  Created by Local User on 6/6/17.
//  Copyright (c) 2017 Local User. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ToDoTasksListViewControllerInput{
    func displayTestInformation(viewModel: ToDoTasksList.TestInformation.ViewModel)
    func displayDataSource(viewModel: ToDoTasksList.DataSource.ViewModel)
}

protocol ToDoTasksListViewControllerOutput{
    func requestTestInformation(request: ToDoTasksList.TestInformation.Request)
    func requestDataSource(request: ToDoTasksList.DataSource.Request)

}

class ToDoTasksListViewController: UIViewController, ToDoTasksListViewControllerInput{
    var output: ToDoTasksListViewControllerOutput!
    var router: ToDoTasksListRouter!
    
    @IBOutlet weak var tableView: UITableView!
    // MARK: Object lifecycle
    var myStruct : [ToDoTasksList.TaskModelCell] = []
    
    override func awakeFromNib(){
        super.awakeFromNib()
        ToDoTasksListConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        requestTestInformation(number: "15")
        requestDataSource()
        tableView.registerCustomCell(identifier: ToDoTaskListCustomCell.getTableViewCellIdentifier())
    }
    
    // MARK: Event handling
    func requestTestInformation(number: String)
    {
        let request = ToDoTasksList.TestInformation.Request(numberText: number)
        output.requestTestInformation(request: request)
    }
    
    func requestDataSource()
    {
        let request = ToDoTasksList.DataSource.Request()
        output.requestDataSource(request: request)
    }

    
    //display logic
    func displayTestInformation(viewModel: ToDoTasksList.TestInformation.ViewModel)
    {
        print("El resultado es \(viewModel.numberText)")
    }
    
    func displayDataSource(viewModel: ToDoTasksList.DataSource.ViewModel)
    {
        myStruct = viewModel.arrayTask
    }


}

extension ToDoTasksListViewController: UITableViewDataSource, UITableViewDelegate
{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return myStruct.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: ToDoTaskListCustomCell.getTableViewCellIdentifier()) as! ToDoTaskListCustomCell
        let item = myStruct[indexPath.row]
        cell.setUpCell(task: item)
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
    
}
